project.afterEvaluate { project ->
    setupAndroidReporting()
}

def setupAndroidReporting() {
    tasks.withType(Test) {
        // Whether or not classes without source location should be instrumented
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            System.out.println("Task -> $testTaskName")
            System.out.println("Flavor -> $productFlavorName")

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                def fileFilter = [
                        // data binding
                        'android/databinding/**/*.class',
                        '**/android/databinding/*Binding.class',
                        '**/android/databinding/*',
                        '**/androidx/databinding/*',
                        '**/BR.*',
                        // android
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/*Test*.*',
                        'android/**/*.*',

                        '**/*_MembersInjector.class',
                        '**/Dagger*Component.class', // covers component implementations
                        '**/Dagger*Component$Builder.class', // covers component builders
                        '**/*Module_*Factory.class',
                        '**/*DaggerCustomApplication*.*',
                        '**/*_HiltComponents*.*',
                        '**/SubscribeBottomDialog.class',

                        // kotlin
                        '**/*MapperImpl*.*',
                        '**/*$ViewInjector*.*',
                        '**/*$ViewBinder*.*',
                        '**/BuildConfig.*',
                        '**/*Component*.*',
                        '**/*BR*.*',
                        '**/Manifest*.*',
                        '**/*$Lambda$*.*',
                        '**/*Companion*.*',
                        '**/*Module*.*',
                        '**/*Dagger*',
                        '**/*Hilt*.*',
                        '**/*MembersInjector*.*',
                        '**/*_MembersInjector.class',
                        '**/*_Factory*.*',
                        '**/*_Provide*Factory*.*',
                        '**/*Extensions*.*',
                        // sealed and data classes
                        '**/*$Result.*',
                        '**/*$Result$*.*',
                        // adapters generated by moshi
                        '**/*JsonAdapter.*',
//                        '**/*Parcel.class',
//                        '**/*$CREATOR.class',
//                        '**/*Test*.*',
//                        '**/AutoValue_*.*',
//                        '**/R.class',
//                        '**/R$*.class',
//                        '**/Manifest*.*',
//                        'android/**/*.*',
//                        'di/*.*',
//                        '**/*$*$*.*', // Anonymous classes generated by kotlin
//                        '**/BuildConfig.*',
//                        '**/*$ViewBinder*.*',
//                        '**/*$ViewInjector*.*',
//                        '**/Lambda$*.class',
//                        '**/Lambda.class',
//                        '**/*Lambda.class',
//                        '**/*Lambda*.class',
//                        '**/*$InjectAdapter.class',
//                        '**/*$ModuleAdapter.class',
//                        '**/*$ViewInjector*.class',
//                        '**/*_MembersInjector.class', //Dagger2 generated code
//                        '*/*_MembersInjector*.*', //Dagger2 generated code
//                        '**/*_*Factory*.*', //Dagger2 generated code
//                        '**/*Component*.*', //Dagger2 generated code
//                        '**/*Module*.*', //Dagger2 generated code
//                        '**/*Activity.*',
//                        '**/*Fragment.*',
//                        '**/*Adapter.*',
//                        '**/*Service.*',
//                        '**/*$ViewInjector*.*',
//                        '**/model/**',
//                        '*Companion*',
//                        '**/*View.*',
//                        '**/*Enum*',
//                        '**/*SavedUsersPopupWindow*',
//                        '**/android/databinding/*',
//                        '**/*$ViewBinder*.*',
//                        '**/BuildConfig.*',
//                        '**/*Application*.*',
//                        '**/*Component*.*',
//                        '**/UiUtils.*',
//                        '**/*Binding*.*',
//                        '**/*Retrofit*.*',
//                        '**/*BR*.*',
//                        '**/*Adapter*.*',
//                        '**/*Rx*.*',
//                        '**/*ViewHolder*.*',
//                        '**/*$Lambda$*.*',
//                        '**/*Dagger*.*',
//                        '**/*_Provide*Factory*.*',
//                        '**/*State*.*',
//                        '**/*.Companion',
//                        '**/*Response*.*',
//                        '**/*Animator*.*',
//                        '**/*Mapper*.*',
//                        '**/*$*',
//                        '**/*Mock*',
//                        '**/*BindingAdapters.class',
//                        '**/*$inlined$*.*',
//                        '**/*Module.*',
//                        '**/*MembersInjector*.*',
//                        '**/*_Provide*.*',
//                        '**/*_Factory*.*',
//                        '**/*ActivityBuilder_*.*',
//                        '**/allowme_fa',
//                        '**/Dagger*Component.class',
//                        '**/Dagger*Component$Builder.class',
//                        '**/*Module_*Factory.class',
//                        '**/model/*.class',
//                        '**/*Activity*.class',
//                        '**/*Transformer*.class',
//                        '**/*ViewHolder*',
//                        '**Service.class',
//                        '**AppViewModelFactory.*',
//                        '**Qualifiers.*',
//                        '**ChannelsCreation.*',
//                        '**NotificationClickReceiver.*',
//                        '**/*Analytics*',
//                        '**/*NavDirection*'
                ]

                def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/$sourceName/classes", excludes: fileFilter)
                def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/$sourceName", excludes: fileFilter)
                classDirectories.from = files([javaTree], [kotlinTree])
                executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
                def coverageSourceDirs = ["src/main/java",
                                          "src/$productFlavorName/java",
                                          "src/$buildTypeName/java"]

                sourceDirectories.setFrom(files(coverageSourceDirs))
                additionalSourceDirs.setFrom(files(coverageSourceDirs))

                reports {
                    csv.enabled false // change if needed
                    xml.enabled false // change if needed
                    html {
                        enabled true
                        destination file("${buildDir}/coverage-report")
                    }
                }
            }
        }
    }
}

android {
    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }
}